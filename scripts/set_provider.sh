#!/usr/bin/env bash
#
# set -x

# Variables
DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

AWS_REGION=$($DIR/read_cfg.sh $HOME/.aws/config "profile ${ROOT_AWS_PROFILE}" region)
AWS_PROFILE=${AWS_PROFILE:-root}
ROOT_AWS_PROFILE=${ROOT_AWS_PROFILE:-root}
MFA_PROFILE_NAME=${ROOT_AWS_PROFILE}-mfa-tmp

PROVIDER_VERSION="2.0"

#************************ generate_root_account_provider() ************************#
generate_root_account_provider()
{
	# generate_aws_temp_profile
	AWS_ORG_ACCOUNTS=$(aws organizations list-accounts --profile $ROOT_AWS_PROFILE)

	PROD_ACCOUNT_ID=$(echo $AWS_ORG_ACCOUNTS | jq -r '.Accounts[] | select(.Name == "production") | .Id')
	# STAGING_ACCOUNT_ID=$(echo $AWS_ORG_ACCOUNTS | jq '.Accounts[] | select(.Name == "staging") | .Id')
	DEV_ACCOUNT_ID=$(echo $AWS_ORG_ACCOUNTS | jq -r  '.Accounts[] | select(.Name == "development") | .Id')
	cat > ${TF_PROVIDER} <<EOF
	# Generated by scripts/set_provider.sh
	provider "aws" {
  	version = "~> ${PROVIDER_VERSION}"
	  profile = "${ROOT_AWS_PROFILE}"
	  region = "${AWS_REGION}"
	  max_retries = 3
	}

	variable "aws_org_account_ids" {
	  default = {
	    prod = "${PROD_ACCOUNT_ID}"
	    # staging = ${STAGING_ACCOUNT_ID}
	    dev = "${DEV_ACCOUNT_ID}"
	  }
	}

	variable "aws_default_region" {
	  default = "${AWS_REGION}"
	}

EOF
}

#************************ generate_cross_account_provider() ************************#
generate_cross_account_provider()
{
	generate_aws_temp_profile
	cat > ${TF_PROVIDER} <<EOF
	# Generated by scripts/set_provider.sh
	provider "aws" {
  	version = "~> ${PROVIDER_VERSION}"
	  region = "${AWS_REGION}"
	  profile = "${MFA_PROFILE_NAME}"
	  assume_role {
	    role_arn = "${AWS_ROLE_ARN}"
	    session_name = "terraform"
	  }
	}

	variable "aws_default_region" {
	  default = "${AWS_REGION}"
	}

	variable "root_dir" {
	  default = "${ROOT_DIR}"
	}

EOF
}

#************************ generate_aws_temp_profile() ************************#
generate_aws_temp_profile()
{
	AWS_ROLE_ARN=$($DIR/read_cfg.sh ${HOME}/.aws/config "profile ${AWS_PROFILE}" role_arn)
	AWS_MFA_ARN=$($DIR/read_cfg.sh ${HOME}/.aws/config "profile ${AWS_PROFILE}" mfa_serial)

	if [ -z "${AWS_ROLE_ARN}" ]; then
		echo "SET ROLE_ARN IN AWS CLI PROFILE" 1>&2
		exit 1
	fi

	if [ -z "${AWS_MFA_ARN}" ]; then
		echo "SET MFA_ARN IN AWS CLI PROFILE" 1>&2
		exit 1
	fi
	generate_temp_session_token
}

#************************ generate_temp_session_token() ************************#
generate_temp_session_token()
{
	# Generate Security Token Flag
	GENERATE_ST="true"
	# Expiration Time: Each SessionToken will have an expiration time which by default is 12 hours and
	# can range between 15 minutes and 36 hours
	MFA_PROFILE_EXISTS=$(more ~/.aws/credentials | grep $MFA_PROFILE_NAME | wc -l)
	if [ $MFA_PROFILE_EXISTS -eq 1 ]; then
	    EXPIRATION_TIME=$(aws configure get expiration --profile $MFA_PROFILE_NAME)
	    NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
	    if [[ "$EXPIRATION_TIME" > "$NOW" ]]; then
	        echo "The Session Token is still valid. New Security Token not required."
	        GENERATE_ST="false"
	    fi
	fi

	if [ "$GENERATE_ST" = "true" ];then
	    read -p "Token code for MFA Device ($AWS_MFA_ARN): " TOKEN_CODE
	    echo "Generating new IAM STS Token ..."
	    read -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN EXPIRATION  < <(aws sts get-session-token --profile ${ROOT_AWS_PROFILE} --output text --query 'Credentials.*' --serial-number ${AWS_MFA_ARN} --token-code $TOKEN_CODE)
	    if [ $? -ne 0 ];then
	        echo "An error occured. AWS credentials file not updated"
	      	exit 1
	    else
	        aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY" --profile $MFA_PROFILE_NAME
	        aws configure set aws_session_token "$AWS_SESSION_TOKEN" --profile $MFA_PROFILE_NAME
	        aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID" --profile $MFA_PROFILE_NAME
	        aws configure set expiration "$EXPIRATION" --profile $MFA_PROFILE_NAME
	        aws configure set region "$DEFAULT_REGION" --profile $MFA_PROFILE_NAME
	        aws configure set output "$DEFAULT_OUTPUT" --profile $MFA_PROFILE_NAME
	        echo "STS Session Token generated and updated in AWS credentials file successfully."
	    fi
	fi
}


if [ "${AWS_PROFILE}" = "${ROOT_AWS_PROFILE}" ];then
		echo "Generating root account terraform provider.tf file"
		generate_root_account_provider
else
	echo "Generating cross account terraform provider.tf file for ${AWS_PROFILE}"
	generate_cross_account_provider
fi
